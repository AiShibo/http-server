//
// Created by asnic on 8/30/2023.
//

#ifndef RE_FILE_SERVER_HTTP_SERVER_H
#define RE_FILE_SERVER_HTTP_SERVER_H

extern char *buf;
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include <event2/event.h>
#include <event2/bufferevent.h>
#include <event2/listener.h>
#include "constants.h"
#include "utils.h"

/*
 * path: the system path to the current directory (relative path starting
 * with ./)
 *
 * event: the lib event instance created by the main
 *
 * the function for outputting dynamically generated HTML file
 * containing all the contents of the current directory
 * to the client using passed-in buffer event.
 * This function first retrieve all the folder
 * contents by using parameter path.
 */
void show_folder(char *path, struct bufferevent *event);

/*
 * err_no: the http status number indicating an abnormal status eg: 500, 404
 *
 * event: the lib event instance created by the main
 *
 * the function for outputting the proper response with corresponding
 * error number
 */
void show_err(int err_no, struct bufferevent *event);

/*
 * path: the system path to the current directory (relative path starting
 * with ./)
 *
 * event: the lib event instance created by the main
 *
 * size: the size of the file
 *
 * function for outputting the file content to the client through buffer event
 * as a stream
 */
void show_file(char *path, struct bufferevent *event, int size);

/*
 * event: the lib event instance created by the main
 *
 * no: HTTP status code
 *
 * descriptor: the descriptor of the status code ex: 200 -> OK
 *
 * file_type: the HTTP file type of the file currently sending
 *
 * size: the size of the file about to send
 *
 * send the proper HTTP response header to the client, will
 * be called every time the server initiate a response
 */
void send_response_header(struct bufferevent *event, int no, char *descriptor, const char *file_type, int size);

/*
 * NOTE: this function's prototype is being defined by the libevent library
 *
 * event: the lib event instance created by the main
 *
 * data: not being used
 *
 * call back function that will be invoked after receive a HTTP request, this function
 * will parse the request string and dispatch the process to either sending a file, folder (as HTML) or error page
 */
void readcb(struct bufferevent *event, void *data);

/*
 * NOTE: this function's prototype is being defined by the libevent library
 *
 * bev: buffered event that has an event other than read&write finish
 *
 * events: the code generated by the library indicating the specific kind of event
 *
 * user_data: not being used
 *
 * this function is a call back function that will be invoked after the buffered event has an event
 * other than readable or write finished. this usually indicates that the connection is being closed by
 * the client. this function determine what kind of event it is by using parameter events, and destroy the corresponding
 * buffered event (which is just bev)
 */
static void conn_eventcb(struct bufferevent *bev, short events, void *user_data);

/*
 * NOTE: this function's prototype is being defined by the libevent library
 *
 * wizard: the connection listener, not being used
 *
 * newfd: the file descriptor pointing to the newly connected TCP client, used to
 * create the corresponding buffered event
 *
 * client_addr: not being used as we are not checking the network address of the client
 *
 * client_addr_size: not being used for the up-mentioned reason
 *
 * vbase: the user passed in custom parameter, in this case it is a pointer to the eventbase struct
 * as we need it to add our newly created buffered event to be listened.
 */
void wizard_cb(struct evconnlistener *wizard, evutil_socket_t newfd,
               struct sockaddr *client_addr, int client_addr_size, void *vbase);

#endif //RE_FILE_SERVER_HTTP_SERVER_H
